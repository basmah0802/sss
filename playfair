#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define SIZE 30

void toLowercase(char key[],int ks){
    int i;
    for(i=0;i<ks;i++){
        if(key[i]>64&&key[i]<91){
            key[i]+=32;
        }
    }
}
int Removespaces(char* key,int ks){
    int i,count=0;
    for(i=0;i<ks;i++){
        if(key[i]!=' '){
            key[count++]=key[i];
        }
    }
    key[count]='\0';
    return count;
}
int prepare(char str[],int ps){
    if(ps%2!=0){
        str[ps++]='z';
        str[ps]='\0';
    }
    return ps;
}
void generatekeytable(char key[],int ks,char keyT[5][5]){
    int dicty[26]={0};
    int i,j,k;
    for(i=0;i<ks;i++){
        if(key[i]!='j'){
            dicty[key[i]-97]=2;
        }
    }
    dicty['j'-97]=1;
    i=0;
    j=0;
    for(k=0;k<ks;k++){
        if(dicty[key[k]-97]==2){
            dicty[key[k]-97]=1;
            keyT[i][j]=key[k];
            j++;
            if(j==5){
                i++;
                j=0;
            }
        }
    }
    for(k=0;k<26;k++){
        if(dicty[k]==0){
            keyT[i][j]=(char)(k+97);
            j++;
            if(j==5){
                i++;
                j=0;
            }
        }
    }
}
void search(char keyT[5][5],char a,char b,int arr[]){
    int i,j;
    if(a=='j'){
        a='i';
    }
    if(b=='j'){
        b='i';
    }
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            if(keyT[i][j]==a){
                arr[0]=i;
                arr[1]=j;
            }
            else if(keyT[i][j]==b){
                arr[2]=i;
                arr[3]=j;
            }
        }
    }
}

int mod5(int a){return (a%5);} 
void decrypt(char str[],int ps,char keyT[5][5]){
    int i,a[4];
    for(i=0;i<ps;i+=2){
        search(keyT,str[i],str[i+1],a);
        if(a[0]==a[2]){
            str[i]=keyT[a[0]][mod5(a[1]+4)];
            str[i+1]=keyT[a[0]][mod5(a[3]+4)];
        }
        else if(a[1]==a[3]){
            str[i]=keyT[mod5(a[0]+4)][a[1]];
            str[i+1]=keyT[mod5(a[2]+4)][a[1]];
        }
        else{
            str[i]=keyT[a[0]][a[3]];
            str[i+1]=keyT[a[2]][a[1]];
        }
        
    }
    
    printf("plain text:%s",str);
        
}
void encrypt(char str[],int ps,char keyT[5][5]){
    int a[4],i;
    for(i=0;i<ps;i+=2){
        search(keyT,str[i],str[i+1],a);
        if(a[0]==a[2]){
            str[i]=keyT[a[0]][mod5(a[1]+1)];
            str[i+1]=keyT[a[0]][mod5(a[3]+1)];
        }
        else if(a[1]==a[3]){
            str[i]=keyT[mod5(a[0]+1)][a[1]];
            str[i+1]=keyT[mod5(a[2]+1)][a[1]];
        }
        else{
            str[i]=keyT[a[0]][a[3]];
            str[i+1]=keyT[a[2]][a[1]];
        }
        
    }
    printf("cipher text:%s\n",str);
    decrypt(str,ps,keyT);
}
void encryptbyplayfair(char key[],char str[]){
    int ks,ps;
    char keyT[5][5];
    ks=strlen(key);
    ks=Removespaces(key,ks);
    toLowercase(key,ks);
    ps=strlen(str);
    ps=Removespaces(str,ps);
    toLowercase(str,ps);
    ps=prepare(str,ps);
    generatekeytable(key,ks,keyT);
    encrypt(str,ps,keyT);
}


int main(){
    char key[SIZE],str[SIZE];
    strcpy(key, "monarchy");
    printf("Key text: %s\n", key);
    strcpy(str,"uvwxzab");
    printf("plain text:%s\n",str);
    encryptbyplayfair(key,str);
}
